-- Primordial UI Library v6.0.0 - Final Complete Version
-- All features implemented with correct HSV color picker

local PrimordialUI = {}
PrimordialUI.__index = PrimordialUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local GuiService = game:GetService("GuiService")
local HttpService = game:GetService("HttpService")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Theme System
local ThemeManager = {
    Current = "Dark",
    DPIScale = 1,
    Font = Enum.Font.Gotham,
    Themes = {
        Dark = {
            MainBackground = Color3.fromRGB(18, 18, 18),
            PanelBackground = Color3.fromRGB(25, 25, 25),
            SectionBackground = Color3.fromRGB(32, 32, 32),
            ElementBackground = Color3.fromRGB(38, 38, 38),
            PrimaryText = Color3.fromRGB(255, 255, 255),
            SecondaryText = Color3.fromRGB(190, 190, 190),
            DimText = Color3.fromRGB(140, 140, 140),
            SectionTitle = Color3.fromRGB(160, 160, 160),
            Accent = Color3.fromRGB(100, 149, 237),
            AccentDim = Color3.fromRGB(70, 119, 207),
            CheckboxBorder = Color3.fromRGB(55, 55, 55),
            CheckboxFill = Color3.fromRGB(100, 149, 237),
            SliderTrack = Color3.fromRGB(45, 45, 45),
            SliderFill = Color3.fromRGB(100, 149, 237),
            SliderThumb = Color3.fromRGB(255, 255, 255),
            DropdownBorder = Color3.fromRGB(55, 55, 55),
            TabInactive = Color3.fromRGB(35, 35, 35),
            TabActive = Color3.fromRGB(100, 149, 237),
            TabHover = Color3.fromRGB(50, 50, 50),
            NotificationBackground = Color3.fromRGB(35, 35, 35),
            NotificationBorder = Color3.fromRGB(100, 149, 237),
            DividerColor = Color3.fromRGB(50, 50, 50)
        },
        Light = {
            MainBackground = Color3.fromRGB(240, 240, 240),
            PanelBackground = Color3.fromRGB(250, 250, 250),
            SectionBackground = Color3.fromRGB(255, 255, 255),
            ElementBackground = Color3.fromRGB(245, 245, 245),
            PrimaryText = Color3.fromRGB(0, 0, 0),
            SecondaryText = Color3.fromRGB(60, 60, 60),
            DimText = Color3.fromRGB(120, 120, 120),
            SectionTitle = Color3.fromRGB(80, 80, 80),
            Accent = Color3.fromRGB(100, 149, 237),
            AccentDim = Color3.fromRGB(130, 179, 255),
            CheckboxBorder = Color3.fromRGB(200, 200, 200),
            CheckboxFill = Color3.fromRGB(100, 149, 237),
            SliderTrack = Color3.fromRGB(220, 220, 220),
            SliderFill = Color3.fromRGB(100, 149, 237),
            SliderThumb = Color3.fromRGB(255, 255, 255),
            DropdownBorder = Color3.fromRGB(200, 200, 200),
            TabInactive = Color3.fromRGB(230, 230, 230),
            TabActive = Color3.fromRGB(100, 149, 237),
            TabHover = Color3.fromRGB(210, 210, 210),
            NotificationBackground = Color3.fromRGB(250, 250, 250),
            NotificationBorder = Color3.fromRGB(100, 149, 237),
            DividerColor = Color3.fromRGB(220, 220, 220)
        }
    }
}

function ThemeManager:SetTheme(themeName)
    if self.Themes[themeName] then
        self.Current = themeName
    end
end

function ThemeManager:SetFont(font)
    self.Font = font
end

function ThemeManager:SetDPIScale(scale)
    self.DPIScale = scale
end

function ThemeManager:GetTheme()
    return self.Themes[self.Current]
end

local Theme = ThemeManager:GetTheme()

-- Mobile Support Detection
local IsMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Sizes Configuration
local Sizes = {
    WindowWidth = 850 * ThemeManager.DPIScale,
    WindowHeight = 650 * ThemeManager.DPIScale,
    SidebarWidth = 70 * ThemeManager.DPIScale,
    TopBarHeight = 38 * ThemeManager.DPIScale,
    BottomBarHeight = 58 * ThemeManager.DPIScale,
    SectionPadding = 12 * ThemeManager.DPIScale,
    ElementHeight = 26 * ThemeManager.DPIScale,
    ElementSpacing = 6 * ThemeManager.DPIScale,
    CheckboxSize = 16 * ThemeManager.DPIScale,
    SliderTrackHeight = 5 * ThemeManager.DPIScale,
    SliderThumbSize = 12 * ThemeManager.DPIScale
}

-- Utility Functions
local function CreateTween(instance, properties, duration)
    duration = duration or 0.2
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

local function MakeDraggable(frame, handle)
    handle = handle or frame
    local dragging, dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           (IsMobile and input.UserInputType == Enum.UserInputType.Touch) then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or
           (IsMobile and input.UserInputType == Enum.UserInputType.Touch) then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Notification System
local NotificationQueue = {}
local NotificationFrame = nil

local function CreateNotificationSystem(parent)
    local notifContainer = Instance.new("Frame")
    notifContainer.Name = "NotificationContainer"
    notifContainer.Size = UDim2.new(0, 300, 1, 0)
    notifContainer.Position = UDim2.new(1, -310, 0, 10)
    notifContainer.BackgroundTransparency = 1
    notifContainer.Parent = parent
    
    local notifLayout = Instance.new("UIListLayout")
    notifLayout.SortOrder = Enum.SortOrder.LayoutOrder
    notifLayout.Padding = UDim.new(0, 8)
    notifLayout.Parent = notifContainer
    
    NotificationFrame = notifContainer
end

-- Main Library
function PrimordialUI:CreateWindow(options)
    options = options or {}
    Theme = ThemeManager:GetTheme()
    
    local window = {
        BottomTabs = {},
        ActiveBottomTab = nil,
        ActiveSideTab = nil,
        ColorPickers = {},
        Dropdowns = {},
        Dependencies = {},
        Tooltips = {},
        ScreenGui = nil,
        MainFrame = nil,
        OnUnload = nil,
        Watermark = nil,
        KeybindMenu = nil,
        CustomCursor = nil
    }
    
    -- User Customization
    local logoAssetId = options.LogoAssetId or ""
    local toggleKey = options.ToggleKey or Enum.KeyCode.RightShift
    local menuTitle = options.Title or "primordial"
    local customCursor = options.CustomCursor or false
    local showWatermark = options.Watermark or false
    local showKeybindMenu = options.KeybindMenu or false
    
    -- Convert logo ID
    if logoAssetId ~= "" and not string.match(logoAssetId, "rbxassetid://") then
        logoAssetId = "rbxassetid://" .. logoAssetId
    end
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PrimordialUI"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.DisplayOrder = 10
    screenGui.Parent = CoreGui or Player.PlayerGui
    window.ScreenGui = screenGui
    
    -- Create Notification System
    CreateNotificationSystem(screenGui)
    
    -- Watermark
    if showWatermark then
        local watermark = Instance.new("TextLabel")
        watermark.Name = "Watermark"
        watermark.Size = UDim2.new(0, 200, 0, 30)
        watermark.Position = UDim2.new(0, 10, 0, 10)
        watermark.BackgroundColor3 = Theme.PanelBackground
        watermark.BackgroundTransparency = 0.2
        watermark.Text = menuTitle .. " | " .. os.date("%X")
        watermark.TextColor3 = Theme.PrimaryText
        watermark.TextSize = 12
        watermark.Font = ThemeManager.Font
        watermark.Parent = screenGui
        
        local waterCorner = Instance.new("UICorner")
        waterCorner.CornerRadius = UDim.new(0, 6)
        waterCorner.Parent = watermark
        
        window.Watermark = watermark
        
        -- Update watermark time
        spawn(function()
            while watermark.Parent do
                watermark.Text = menuTitle .. " | " .. os.date("%X")
                wait(1)
            end
        end)
    end
    
    -- Custom Cursor
    if customCursor then
        local cursor = Instance.new("ImageLabel")
        cursor.Name = "CustomCursor"
        cursor.Size = UDim2.new(0, 20, 0, 20)
        cursor.BackgroundTransparency = 1
        cursor.Image = "rbxasset://textures/Cursors/KeyboardMouse/ArrowCursor.png"
        cursor.ZIndex = 10000
        cursor.Parent = screenGui
        
        window.CustomCursor = cursor
        
        RunService.RenderStepped:Connect(function()
            if cursor.Parent then
                local mousePos = UserInputService:GetMouseLocation()
                cursor.Position = UDim2.new(0, mousePos.X, 0, mousePos.Y)
            end
        end)
        
        UserInputService.MouseIconEnabled = false
    end
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainWindow"
    mainFrame.Size = UDim2.new(0, Sizes.WindowWidth, 0, Sizes.WindowHeight)
    mainFrame.Position = UDim2.new(0.5, -Sizes.WindowWidth/2, 0.5, -Sizes.WindowHeight/2)
    mainFrame.BackgroundColor3 = Theme.MainBackground
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui
    window.MainFrame = mainFrame
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 10)
    mainCorner.Parent = mainFrame
    
    -- Top Bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(1, 0, 0, Sizes.TopBarHeight)
    topBar.BackgroundColor3 = Theme.PanelBackground
    topBar.BorderSizePixel = 0
    topBar.Parent = mainFrame
    
    local topBarCorner = Instance.new("UICorner")
    topBarCorner.CornerRadius = UDim.new(0, 10)
    topBarCorner.Parent = topBar
    
    local topBarFix = Instance.new("Frame")
    topBarFix.Size = UDim2.new(1, 0, 0, 10)
    topBarFix.Position = UDim2.new(0, 0, 1, -10)
    topBarFix.BackgroundColor3 = Theme.PanelBackground
    topBarFix.BorderSizePixel = 0
    topBarFix.Parent = topBar
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Text = menuTitle:lower()
    title.Size = UDim2.new(1, 0, 1, 0)
    title.BackgroundTransparency = 1
    title.TextColor3 = Theme.PrimaryText
    title.TextSize = 15
    title.Font = ThemeManager.Font
    title.Parent = topBar
    
    MakeDraggable(mainFrame, topBar)
    
    -- Left Sidebar with Scrollbar
    local sidebar = Instance.new("Frame")
    sidebar.Name = "Sidebar"
    sidebar.Position = UDim2.new(0, 0, 0, Sizes.TopBarHeight)
    sidebar.Size = UDim2.new(0, Sizes.SidebarWidth, 1, -Sizes.TopBarHeight - Sizes.BottomBarHeight)
    sidebar.BackgroundColor3 = Theme.PanelBackground
    sidebar.BorderSizePixel = 0
    sidebar.Parent = mainFrame
    
    -- Logo handling
    local logoHeight = 0
    if logoAssetId ~= "" then
        local success = pcall(function()
            local logoContainer = Instance.new("Frame")
            logoContainer.Name = "LogoContainer"
            logoContainer.Size = UDim2.new(0, 48, 0, 48)
            logoContainer.Position = UDim2.new(0.5, -24, 0, 12)
            logoContainer.BackgroundTransparency = 1
            logoContainer.Parent = sidebar
            
            local logo = Instance.new("ImageLabel")
            logo.Name = "Logo"
            logo.Size = UDim2.new(1, 0, 1, 0)
            logo.BackgroundTransparency = 1
            logo.Image = logoAssetId
            logo.ScaleType = Enum.ScaleType.Fit
            logo.Parent = logoContainer
            
            logoHeight = 60
        end)
    end
    
    -- Sidebar Tabs Container with Scrollbar
    local sidebarScroll = Instance.new("ScrollingFrame")
    sidebarScroll.Name = "SidebarScroll"
    sidebarScroll.Position = UDim2.new(0, 0, 0, logoHeight + 15)
    sidebarScroll.Size = UDim2.new(1, 0, 1, -(logoHeight + 15))
    sidebarScroll.BackgroundTransparency = 1
    sidebarScroll.BorderSizePixel = 0
    sidebarScroll.ScrollBarThickness = 3
    sidebarScroll.ScrollBarImageColor3 = Theme.Accent
    sidebarScroll.ScrollBarImageTransparency = 0.5
    sidebarScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    sidebarScroll.Parent = sidebar
    
    local sidebarLayout = Instance.new("UIListLayout")
    sidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sidebarLayout.Padding = UDim.new(0, 6)
    sidebarLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    sidebarLayout.Parent = sidebarScroll
    
    -- Auto-resize sidebar scroll
    sidebarLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebarScroll.CanvasSize = UDim2.new(0, 0, 0, sidebarLayout.AbsoluteContentSize.Y)
    end)
    
    -- Content Container
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "ContentContainer"
    contentContainer.Position = UDim2.new(0, Sizes.SidebarWidth, 0, Sizes.TopBarHeight)
    contentContainer.Size = UDim2.new(1, -Sizes.SidebarWidth, 1, -Sizes.TopBarHeight - Sizes.BottomBarHeight)
    contentContainer.BackgroundTransparency = 1
    contentContainer.ClipsDescendants = true
    contentContainer.Parent = mainFrame
    
    -- Bottom Navigation Bar
    local bottomBar = Instance.new("Frame")
    bottomBar.Name = "BottomBar"
    bottomBar.Position = UDim2.new(0, 0, 1, -Sizes.BottomBarHeight)
    bottomBar.Size = UDim2.new(1, 0, 0, Sizes.BottomBarHeight)
    bottomBar.BackgroundColor3 = Theme.PanelBackground
    bottomBar.BorderSizePixel = 0
    bottomBar.Parent = mainFrame
    
    local bottomBarCorner = Instance.new("UICorner")
    bottomBarCorner.CornerRadius = UDim.new(0, 10)
    bottomBarCorner.Parent = bottomBar
    
    local bottomBarFix = Instance.new("Frame")
    bottomBarFix.Size = UDim2.new(1, 0, 0, 10)
    bottomBarFix.Position = UDim2.new(0, 0, 0, 0)
    bottomBarFix.BackgroundColor3 = Theme.PanelBackground
    bottomBarFix.BorderSizePixel = 0
    bottomBarFix.Parent = bottomBar
    
    local bottomTabsContainer = Instance.new("Frame")
    bottomTabsContainer.Size = UDim2.new(1, 0, 1, 0)
    bottomTabsContainer.BackgroundTransparency = 1
    bottomTabsContainer.Parent = bottomBar
    
    local bottomLayout = Instance.new("UIListLayout")
    bottomLayout.FillDirection = Enum.FillDirection.Horizontal
    bottomLayout.SortOrder = Enum.SortOrder.LayoutOrder
    bottomLayout.Parent = bottomTabsContainer
    
    -- Keybind Menu
    if showKeybindMenu then
        local keybindMenu = Instance.new("Frame")
        keybindMenu.Name = "KeybindMenu"
        keybindMenu.Size = UDim2.new(0, 200, 0, 300)
        keybindMenu.Position = UDim2.new(0, 10, 0.5, -150)
        keybindMenu.BackgroundColor3 = Theme.PanelBackground
        keybindMenu.BackgroundTransparency = 0.1
        keybindMenu.Visible = false
        keybindMenu.Parent = screenGui
        
        local keybindCorner = Instance.new("UICorner")
        keybindCorner.CornerRadius = UDim.new(0, 8)
        keybindCorner.Parent = keybindMenu
        
        local keybindTitle = Instance.new("TextLabel")
        keybindTitle.Text = "Keybinds"
        keybindTitle.Size = UDim2.new(1, 0, 0, 30)
        keybindTitle.BackgroundTransparency = 1
        keybindTitle.TextColor3 = Theme.PrimaryText
        keybindTitle.TextSize = 14
        keybindTitle.Font = ThemeManager.Font
        keybindTitle.Parent = keybindMenu
        
        MakeDraggable(keybindMenu)
        window.KeybindMenu = keybindMenu
    end
    
    -- Close all dropdowns
    local function closeAllDropdowns()
        for _, dropdown in pairs(window.Dropdowns) do
            if dropdown.List and dropdown.List.Visible then
                dropdown.List.Visible = false
                dropdown.Open = false
                if dropdown.Chevron then
                    dropdown.Chevron.Text = "▼"
                end
            end
        end
    end
    
    -- Notification Function
    function window:Notify(options)
        options = options or {}
        local text = options.Text or "Notification"
        local duration = options.Duration or 3
        local type = options.Type or "Info"
        
        local notification = Instance.new("Frame")
        notification.Size = UDim2.new(1, 0, 0, 60)
        notification.BackgroundColor3 = Theme.NotificationBackground
        notification.BackgroundTransparency = 0.1
        notification.Parent = NotificationFrame
        
        local notifCorner = Instance.new("UICorner")
        notifCorner.CornerRadius = UDim.new(0, 8)
        notifCorner.Parent = notification
        
        local notifBorder = Instance.new("UIStroke")
        notifBorder.Color = type == "Success" and Color3.fromRGB(0, 255, 0) or 
                          type == "Error" and Color3.fromRGB(255, 0, 0) or 
                          Theme.NotificationBorder
        notifBorder.Thickness = 2
        notifBorder.Parent = notification
        
        local notifText = Instance.new("TextLabel")
        notifText.Text = text
        notifText.Size = UDim2.new(1, -10, 1, 0)
        notifText.Position = UDim2.new(0, 5, 0, 0)
        notifText.BackgroundTransparency = 1
        notifText.TextColor3 = Theme.PrimaryText
        notifText.TextSize = 13
        notifText.Font = ThemeManager.Font
        notifText.TextWrapped = true
        notifText.TextXAlignment = Enum.TextXAlignment.Left
        notifText.Parent = notification
        
        -- Fade in
        notification.BackgroundTransparency = 1
        notifText.TextTransparency = 1
        CreateTween(notification, {BackgroundTransparency = 0.1}, 0.3)
        CreateTween(notifText, {TextTransparency = 0}, 0.3)
        
        -- Auto remove
        spawn(function()
            wait(duration)
            CreateTween(notification, {BackgroundTransparency = 1}, 0.3)
            CreateTween(notifText, {TextTransparency = 1}, 0.3)
            wait(0.3)
            notification:Destroy()
        end)
    end
    
    -- Tooltip System
    local tooltipFrame = Instance.new("Frame")
    tooltipFrame.Name = "Tooltip"
    tooltipFrame.Size = UDim2.new(0, 200, 0, 30)
    tooltipFrame.BackgroundColor3 = Theme.PanelBackground
    tooltipFrame.BorderSizePixel = 0
    tooltipFrame.Visible = false
    tooltipFrame.ZIndex = 9999
    tooltipFrame.Parent = screenGui
    
    local tooltipCorner = Instance.new("UICorner")
    tooltipCorner.CornerRadius = UDim.new(0, 6)
    tooltipCorner.Parent = tooltipFrame
    
    local tooltipText = Instance.new("TextLabel")
    tooltipText.Size = UDim2.new(1, -10, 1, 0)
    tooltipText.Position = UDim2.new(0, 5, 0, 0)
    tooltipText.BackgroundTransparency = 1
    tooltipText.TextColor3 = Theme.PrimaryText
    tooltipText.TextSize = 12
    tooltipText.Font = ThemeManager.Font
    tooltipText.TextWrapped = true
    tooltipText.Parent = tooltipFrame
    
    function window:AddTooltip(element, text)
        element.MouseEnter:Connect(function()
            tooltipText.Text = text
            tooltipFrame.Visible = true
            
            RunService.RenderStepped:Connect(function()
                if tooltipFrame.Visible then
                    local mousePos = UserInputService:GetMouseLocation()
                    tooltipFrame.Position = UDim2.new(0, mousePos.X + 10, 0, mousePos.Y + 10)
                end
            end)
        end)
        
        element.MouseLeave:Connect(function()
            tooltipFrame.Visible = false
        end)
    end
    
    -- Create Bottom Tab
    function window:CreateBottomTab(name, icon)
        local bottomTab = {
            Name = name,
            Icon = icon,
            SideTabs = {},
            ActiveSideTab = nil,
            Button = nil
        }
        
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name
        tabButton.Size = UDim2.new(1/6, 0, 1, 0)
        tabButton.BackgroundTransparency = 1
        tabButton.Text = ""
        tabButton.AutoButtonColor = false
        tabButton.Parent = bottomTabsContainer
        
        local iconLabel = Instance.new("TextLabel")
        iconLabel.Size = UDim2.new(1, 0, 0, 26)
        iconLabel.Position = UDim2.new(0, 0, 0, 6)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Text = icon or "?"
        iconLabel.TextColor3 = Theme.DimText
        iconLabel.TextSize = 20
        iconLabel.Font = ThemeManager.Font
        iconLabel.Parent = tabButton
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 0, 14)
        nameLabel.Position = UDim2.new(0, 0, 1, -18)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = name:lower()
        nameLabel.TextColor3 = Theme.DimText
        nameLabel.TextSize = 10
        nameLabel.Font = ThemeManager.Font
        nameLabel.Parent = tabButton
        
        bottomTab.Button = tabButton
        bottomTab.IconLabel = iconLabel
        bottomTab.NameLabel = nameLabel
        
        tabButton.MouseButton1Click:Connect(function()
            closeAllDropdowns()
            window:SelectBottomTab(bottomTab)
        end)
        
        tabButton.MouseEnter:Connect(function()
            if window.ActiveBottomTab ~= bottomTab then
                CreateTween(iconLabel, {TextColor3 = Theme.SecondaryText}, 0.15)
                CreateTween(nameLabel, {TextColor3 = Theme.SecondaryText}, 0.15)
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if window.ActiveBottomTab ~= bottomTab then
                CreateTween(iconLabel, {TextColor3 = Theme.DimText}, 0.15)
                CreateTween(nameLabel, {TextColor3 = Theme.DimText}, 0.15)
            end
        end)
        
        -- Create Side Tab
        function bottomTab:CreateSideTab(name)
            local sideTab = {
                Name = name,
                Sections = {},
                Content = nil,
                Button = nil
            }
            
            local sideButton = Instance.new("TextButton")
            sideButton.Name = name
            sideButton.Size = UDim2.new(0, Sizes.SidebarWidth - 16, 0, 42)
            sideButton.BackgroundColor3 = Theme.TabInactive
            sideButton.BackgroundTransparency = 0.5
            sideButton.BorderSizePixel = 0
            sideButton.AutoButtonColor = false
            sideButton.Text = ""
            sideButton.Visible = false
            sideButton.Parent = sidebarScroll
            
            local sideCorner = Instance.new("UICorner")
            sideCorner.CornerRadius = UDim.new(0, 6)
            sideCorner.Parent = sideButton
            
            local sideLabel = Instance.new("TextLabel")
            sideLabel.Size = UDim2.new(1, 0, 1, 0)
            sideLabel.BackgroundTransparency = 1
            sideLabel.Text = name:lower()
            sideLabel.TextColor3 = Theme.SecondaryText
            sideLabel.TextSize = 12
            sideLabel.Font = ThemeManager.Font
            sideLabel.Parent = sideButton
            
            local sideContent = Instance.new("ScrollingFrame")
            sideContent.Name = name .. "Content"
            sideContent.Size = UDim2.new(1, -Sizes.SectionPadding * 2, 1, -Sizes.SectionPadding * 2)
            sideContent.Position = UDim2.new(0, Sizes.SectionPadding, 0, Sizes.SectionPadding)
            sideContent.BackgroundTransparency = 1
            sideContent.BorderSizePixel = 0
            sideContent.ScrollBarThickness = 4
            sideContent.ScrollBarImageColor3 = Theme.Accent
            sideContent.ScrollBarImageTransparency = 0.5
            sideContent.Visible = false
            sideContent.ClipsDescendants = true
            sideContent.CanvasSize = UDim2.new(0, 0, 0, 0)
            sideContent.Parent = contentContainer
            
            local contentGrid = Instance.new("UIGridLayout")
            contentGrid.CellSize = UDim2.new(0.31, 0, 0, 200)
            contentGrid.CellPadding = UDim2.new(0.035, 0, 0, 12)
            contentGrid.SortOrder = Enum.SortOrder.LayoutOrder
            contentGrid.FillDirection = Enum.FillDirection.Horizontal
            contentGrid.Parent = sideContent
            
            contentGrid:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                sideContent.CanvasSize = UDim2.new(0, 0, 0, contentGrid.AbsoluteContentSize.Y)
            end)
            
            sideButton.MouseButton1Click:Connect(function()
                closeAllDropdowns()
                bottomTab:SelectSideTab(sideTab)
            end)
            
            sideButton.MouseEnter:Connect(function()
                if bottomTab.ActiveSideTab ~= sideTab then
                    CreateTween(sideButton, {BackgroundTransparency = 0.3})
                end
            end)
            
            sideButton.MouseLeave:Connect(function()
                if bottomTab.ActiveSideTab ~= sideTab then
                    CreateTween(sideButton, {BackgroundTransparency = 0.5})
                end
            end)
            
            sideTab.Button = sideButton
            sideTab.Content = sideContent
            
            -- Create Section/Groupbox
            function sideTab:CreateSection(sectionName, options)
                options = options or {}
                local section = {
                    Elements = {},
                    Frame = nil,
                    DependsOn = options.DependsOn
                }
                
                local sectionContainer = Instance.new("Frame")
                sectionContainer.Name = sectionName .. "Container"
                sectionContainer.BackgroundTransparency = 1
                sectionContainer.Parent = sideContent
                
                local sectionFrame = Instance.new("Frame")
                sectionFrame.Name = sectionName
                sectionFrame.Size = UDim2.new(1, 0, 0, 0)
                sectionFrame.BackgroundColor3 = Theme.SectionBackground
                sectionFrame.BackgroundTransparency = 0.1
                sectionFrame.BorderSizePixel = 0
                sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
                sectionFrame.Parent = sectionContainer
                
                -- Handle dependency
                if section.DependsOn then
                    sectionFrame.Visible = section.DependsOn.Value
                    table.insert(window.Dependencies, {
                        Element = sectionFrame,
                        DependsOn = section.DependsOn
                    })
                end
                
                local sectionCorner = Instance.new("UICorner")
                sectionCorner.CornerRadius = UDim.new(0, 8)
                sectionCorner.Parent = sectionFrame
                
                local sectionTitle = Instance.new("TextLabel")
                sectionTitle.Name = "Title"
                sectionTitle.Text = sectionName:lower()
                sectionTitle.Size = UDim2.new(1, -Sizes.SectionPadding * 2, 0, 22)
                sectionTitle.Position = UDim2.new(0, Sizes.SectionPadding, 0, 6)
                sectionTitle.BackgroundTransparency = 1
                sectionTitle.TextColor3 = Theme.SectionTitle
                sectionTitle.TextSize = 12
                sectionTitle.Font = ThemeManager.Font
                sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
                sectionTitle.Parent = sectionFrame
                
                local elementsContainer = Instance.new("Frame")
                elementsContainer.Name = "Elements"
                elementsContainer.Position = UDim2.new(0, Sizes.SectionPadding, 0, 32)
                elementsContainer.Size = UDim2.new(1, -Sizes.SectionPadding * 2, 0, 0)
                elementsContainer.AutomaticSize = Enum.AutomaticSize.Y
                elementsContainer.BackgroundTransparency = 1
                elementsContainer.Parent = sectionFrame
                
                local elementLayout = Instance.new("UIListLayout")
                elementLayout.SortOrder = Enum.SortOrder.LayoutOrder
                elementLayout.Padding = UDim.new(0, Sizes.ElementSpacing)
                elementLayout.Parent = elementsContainer
                
                local bottomPadding = Instance.new("Frame")
                bottomPadding.Name = "BottomPadding"
                bottomPadding.Size = UDim2.new(1, 0, 0, Sizes.SectionPadding)
                bottomPadding.BackgroundTransparency = 1
                bottomPadding.LayoutOrder = 999999
                bottomPadding.Parent = elementsContainer
                
                sectionFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                    sectionContainer.Size = UDim2.new(1, 0, 0, sectionFrame.AbsoluteSize.Y)
                    contentGrid.CellSize = UDim2.new(0.31, 0, 0, sectionFrame.AbsoluteSize.Y)
                end)
                
                section.Frame = sectionFrame
                
                -- Create Tabbox (section with tabs)
                function section:CreateTabbox(name)
                    local tabbox = {
                        Tabs = {},
                        ActiveTab = nil
                    }
                    
                    local tabboxFrame = Instance.new("Frame")
                    tabboxFrame.Name = name
                    tabboxFrame.Size = UDim2.new(1, 0, 0, 200)
                    tabboxFrame.BackgroundTransparency = 1
                    tabboxFrame.Parent = elementsContainer
                    
                    local tabHeader = Instance.new("Frame")
                    tabHeader.Size = UDim2.new(1, 0, 0, 25)
                    tabHeader.BackgroundTransparency = 1
                    tabHeader.Parent = tabboxFrame
                    
                    local tabLayout = Instance.new("UIListLayout")
                    tabLayout.FillDirection = Enum.FillDirection.Horizontal
                    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    tabLayout.Padding = UDim.new(0, 4)
                    tabLayout.Parent = tabHeader
                    
                    local tabContent = Instance.new("Frame")
                    tabContent.Position = UDim2.new(0, 0, 0, 30)
                    tabContent.Size = UDim2.new(1, 0, 1, -30)
                    tabContent.BackgroundTransparency = 1
                    tabContent.Parent = tabboxFrame
                    
                    function tabbox:AddTab(tabName)
                        local tab = {
                            Elements = {}
                        }
                        
                        local tabButton = Instance.new("TextButton")
                        tabButton.Size = UDim2.new(0, 60, 1, 0)
                        tabButton.BackgroundColor3 = Theme.TabInactive
                        tabButton.BackgroundTransparency = 0.5
                        tabButton.BorderSizePixel = 0
                        tabButton.Text = tabName
                        tabButton.TextColor3 = Theme.SecondaryText
                        tabButton.TextSize = 11
                        tabButton.Font = ThemeManager.Font
                        tabButton.AutoButtonColor = false
                        tabButton.Parent = tabHeader
                        
                        local tabCorner = Instance.new("UICorner")
                        tabCorner.CornerRadius = UDim.new(0, 4)
                        tabCorner.Parent = tabButton
                        
                        local tabFrame = Instance.new("Frame")
                        tabFrame.Size = UDim2.new(1, 0, 1, 0)
                        tabFrame.BackgroundTransparency = 1
                        tabFrame.Visible = false
                        tabFrame.Parent = tabContent
                        
                        tabButton.MouseButton1Click:Connect(function()
                            for _, t in pairs(tabbox.Tabs) do
                                t.Frame.Visible = false
                                t.Button.BackgroundTransparency = 0.5
                                t.Button.TextColor3 = Theme.SecondaryText
                            end
                            
                            tabFrame.Visible = true
                            tabButton.BackgroundTransparency = 0.2
                            tabButton.TextColor3 = Theme.PrimaryText
                            tabbox.ActiveTab = tab
                        end)
                        
                        tab.Button = tabButton
                        tab.Frame = tabFrame
                        
                        table.insert(tabbox.Tabs, tab)
                        
                        if #tabbox.Tabs == 1 then
                            tabButton.MouseButton1Click:Fire()
                        end
                        
                        return tab
                    end
                    
                    return tabbox
                end
                
                -- Create Label
                function section:CreateLabel(text)
                    local label = Instance.new("TextLabel")
                    label.Text = text
                    label.Size = UDim2.new(1, 0, 0, 20)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Theme.SecondaryText
                    label.TextSize = 12
                    label.Font = ThemeManager.Font
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.Parent = elementsContainer
                    
                    return label
                end
                
                -- Create Divider
                function section:CreateDivider()
                    local divider = Instance.new("Frame")
                    divider.Size = UDim2.new(1, 0, 0, 1)
                    divider.BackgroundColor3 = Theme.DividerColor
                    divider.BorderSizePixel = 0
                    divider.Parent = elementsContainer
                    
                    return divider
                end
                
                -- Create Input
                function section:CreateInput(options)
                    options = options or {}
                    local input = {
                        Value = options.Default or "",
                        Callback = options.Callback or function() end,
                        Type = options.Type or "Text"
                    }
                    
                    local inputFrame = Instance.new("Frame")
                    inputFrame.Name = options.Name or "Input"
                    inputFrame.Size = UDim2.new(1, 0, 0, Sizes.ElementHeight)
                    inputFrame.BackgroundTransparency = 1
                    inputFrame.Parent = elementsContainer
                    
                    local label = Instance.new("TextLabel")
                    label.Text = options.Name or "Input"
                    label.Size = UDim2.new(0.4, 0, 1, 0)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Theme.PrimaryText
                    label.TextSize = 12
                    label.Font = ThemeManager.Font
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.Parent = inputFrame
                    
                    local inputBox = Instance.new("TextBox")
                    inputBox.Size = UDim2.new(0.6, -4, 1, 0)
                    inputBox.Position = UDim2.new(0.4, 4, 0, 0)
                    inputBox.BackgroundColor3 = Theme.ElementBackground
                    inputBox.BorderSizePixel = 0
                    inputBox.Text = input.Value
                    inputBox.TextColor3 = Theme.SecondaryText
                    inputBox.TextSize = 12
                    inputBox.Font = ThemeManager.Font
                    inputBox.PlaceholderText = options.Placeholder or "Enter " .. (options.Name or "value")
                    inputBox.PlaceholderColor3 = Theme.DimText
                    inputBox.Parent = inputFrame
                    
                    local inputCorner = Instance.new("UICorner")
                    inputCorner.CornerRadius = UDim.new(0, 4)
                    inputCorner.Parent = inputBox
                    
                    inputBox.FocusLost:Connect(function(enterPressed)
                        if input.Type == "Number" then
                            local num = tonumber(inputBox.Text)
                            if num then
                                input.Value = num
                            else
                                inputBox.Text = tostring(input.Value)
                            end
                        else
                            input.Value = inputBox.Text
                        end
                        input.Callback(input.Value)
                    end)
                    
                    return input
                end
                
                -- Create Image
                function section:CreateImage(options)
                    options = options or {}
                    
                    local imageLabel = Instance.new("ImageLabel")
                    imageLabel.Size = UDim2.new(1, 0, 0, options.Height or 100)
                    imageLabel.BackgroundTransparency = 1
                    imageLabel.Image = options.Image or ""
                    imageLabel.ScaleType = options.ScaleType or Enum.ScaleType.Fit
                    imageLabel.Parent = elementsContainer
                    
                    return imageLabel
                end
                
                -- Create Viewport (3D model viewer)
                function section:CreateViewport(options)
                    options = options or {}
                    
                    local viewportFrame = Instance.new("ViewportFrame")
                    viewportFrame.Size = UDim2.new(1, 0, 0, options.Height or 150)
                    viewportFrame.BackgroundColor3 = Theme.ElementBackground
                    viewportFrame.BorderSizePixel = 0
                    viewportFrame.Parent = elementsContainer
                    
                    local viewportCorner = Instance.new("UICorner")
                    viewportCorner.CornerRadius = UDim.new(0, 4)
                    viewportCorner.Parent = viewportFrame
                    
                    local camera = Instance.new("Camera")
                    camera.Parent = viewportFrame
                    viewportFrame.CurrentCamera = camera
                    
                    if options.Model then
                        options.Model:Clone().Parent = viewportFrame
                        camera.CFrame = CFrame.new(0, 0, 5) * CFrame.Angles(0, math.rad(180), 0)
                    end
                    
                    return viewportFrame
                end
                
                -- All other elements (Checkbox, Slider, Dropdown, Button, Keybind)
                -- [Previous element implementations remain the same]
                
                function section:CreateCheckbox(options)
                    options = options or {}
                    local checkbox = {
                        Value = options.Default or false,
                        Callback = options.Callback or function() end,
                        DependsOn = options.DependsOn
                    }
                    
                    local checkboxFrame = Instance.new("Frame")
                    checkboxFrame.Name = options.Name or "Checkbox"
                    checkboxFrame.Size = UDim2.new(1, 0, 0, Sizes.ElementHeight)
                    checkboxFrame.BackgroundTransparency = 1
                    checkboxFrame.Parent = elementsContainer
                    
                    -- Handle dependency
                    if checkbox.DependsOn then
                        checkboxFrame.Visible = checkbox.DependsOn.Value
                        table.insert(window.Dependencies, {
                            Element = checkboxFrame,
                            DependsOn = checkbox.DependsOn
                        })
                    end
                    
                    local checkButton = Instance.new("TextButton")
                    checkButton.Size = UDim2.new(0, Sizes.CheckboxSize, 0, Sizes.CheckboxSize)
                    checkButton.Position = UDim2.new(0, 0, 0.5, -Sizes.CheckboxSize/2)
                    checkButton.BackgroundColor3 = Theme.CheckboxBorder
                    checkButton.BackgroundTransparency = 0.3
                    checkButton.BorderSizePixel = 0
                    checkButton.Text = ""
                    checkButton.AutoButtonColor = false
                    checkButton.Parent = checkboxFrame
                    
                    local checkCorner = Instance.new("UICorner")
                    checkCorner.CornerRadius = UDim.new(0, 3)
                    checkCorner.Parent = checkButton
                    
                    local checkMark = Instance.new("Frame")
                    checkMark.Name = "CheckMark"
                    checkMark.Size = UDim2.new(1, -4, 1, -4)
                    checkMark.Position = UDim2.new(0, 2, 0, 2)
                    checkMark.BackgroundColor3 = Theme.CheckboxFill
                    checkMark.BorderSizePixel = 0
                    checkMark.BackgroundTransparency = checkbox.Value and 0 or 1
                    checkMark.Parent = checkButton
                    
                    local markCorner = Instance.new("UICorner")
                    markCorner.CornerRadius = UDim.new(0, 2)
                    markCorner.Parent = checkMark
                    
                    local label = Instance.new("TextLabel")
                    label.Text = options.Name or "Checkbox"
                    label.Position = UDim2.new(0, Sizes.CheckboxSize + 6, 0, 0)
                    label.Size = UDim2.new(1, -(Sizes.CheckboxSize + 6), 1, 0)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Theme.PrimaryText
                    label.TextSize = 12
                    label.Font = ThemeManager.Font
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.Parent = checkboxFrame
                    
                    -- Add tooltip if provided
                    if options.Tooltip then
                        window:AddTooltip(checkboxFrame, options.Tooltip)
                    end
                    
                    -- Color Picker Support
                    if options.ColorPicker then
                        local colorButton = Instance.new("TextButton")
                        colorButton.Size = UDim2.new(0, 28, 0, 16)
                        colorButton.Position = UDim2.new(1, -36, 0.5, -8)
                        colorButton.BackgroundColor3 = options.ColorPicker.Default or Color3.new(1, 1, 1)
                        colorButton.BorderSizePixel = 0
                        colorButton.Text = ""
                        colorButton.AutoButtonColor = false
                        colorButton.Parent = checkboxFrame
                        
                        local colorCorner = Instance.new("UICorner")
                        colorCorner.CornerRadius = UDim.new(0, 3)
                        colorCorner.Parent = colorButton
                        
                        local colorBorder = Instance.new("UIStroke")
                        colorBorder.Color = Theme.CheckboxBorder
                        colorBorder.Thickness = 1
                        colorBorder.Transparency = 0.5
                        colorBorder.Parent = colorButton
                        
                        colorButton.MouseButton1Click:Connect(function()
                            window:CreateColorPicker({
                                Default = colorButton.BackgroundColor3,
                                Callback = function(color)
                                    colorButton.BackgroundColor3 = color
                                    if options.ColorPicker.Callback then
                                        options.ColorPicker.Callback(color)
                                    end
                                end
                            })
                        end)
                    end
                    
                    function checkbox:Set(value)
                        checkbox.Value = value
                        CreateTween(checkMark, {BackgroundTransparency = value and 0 or 1}, 0.15)
                        checkbox.Callback(value)
                        
                        -- Update dependencies
                        for _, dep in pairs(window.Dependencies) do
                            if dep.DependsOn == checkbox then
                                dep.Element.Visible = value
                            end
                        end
                    end
                    
                    checkButton.MouseButton1Click:Connect(function()
                        checkbox:Set(not checkbox.Value)
                    end)
                    
                    return checkbox
                end
                
                function section:CreateSlider(options)
                    options = options or {}
                    local slider = {
                        Value = options.Default or options.Min or 0,
                        Callback = options.Callback or function() end
                    }
                    
                    local sliderFrame = Instance.new("Frame")
                    sliderFrame.Name = options.Name or "Slider"
                    sliderFrame.Size = UDim2.new(1, 0, 0, Sizes.ElementHeight + 20)
                    sliderFrame.BackgroundTransparency = 1
                    sliderFrame.Parent = elementsContainer
                    
                    local label = Instance.new("TextLabel")
                    label.Text = options.Name or "Slider"
                    label.Size = UDim2.new(0.65, 0, 0, 18)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Theme.PrimaryText
                    label.TextSize = 12
                    label.Font = ThemeManager.Font
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.Parent = sliderFrame
                    
                    local valueLabel = Instance.new("TextLabel")
                    valueLabel.Text = tostring(slider.Value) .. (options.Suffix or "")
                    valueLabel.Size = UDim2.new(0.35, 0, 0, 18)
                    valueLabel.Position = UDim2.new(0.65, 0, 0, 0)
                    valueLabel.BackgroundTransparency = 1
                    valueLabel.TextColor3 = Theme.SecondaryText
                    valueLabel.TextSize = 12
                    valueLabel.Font = ThemeManager.Font
                    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
                    valueLabel.Parent = sliderFrame
                    
                    local sliderTrack = Instance.new("Frame")
                    sliderTrack.Size = UDim2.new(1, 0, 0, Sizes.SliderTrackHeight)
                    sliderTrack.Position = UDim2.new(0, 0, 0, 24)
                    sliderTrack.BackgroundColor3 = Theme.SliderTrack
                    sliderTrack.BorderSizePixel = 0
                    sliderTrack.Parent = sliderFrame
                    
                    local trackCorner = Instance.new("UICorner")
                    trackCorner.CornerRadius = UDim.new(0, Sizes.SliderTrackHeight/2)
                    trackCorner.Parent = sliderTrack
                    
                    local sliderFill = Instance.new("Frame")
                    sliderFill.Size = UDim2.new(0.5, 0, 1, 0)
                    sliderFill.BackgroundColor3 = Theme.SliderFill
                    sliderFill.BorderSizePixel = 0
                    sliderFill.Parent = sliderTrack
                    
                    local fillCorner = Instance.new("UICorner")
                    fillCorner.CornerRadius = UDim.new(0, Sizes.SliderTrackHeight/2)
                    fillCorner.Parent = sliderFill
                    
                    local sliderThumb = Instance.new("TextButton")
                    sliderThumb.Size = UDim2.new(0, Sizes.SliderThumbSize, 0, Sizes.SliderThumbSize)
                    sliderThumb.Position = UDim2.new(0.5, -Sizes.SliderThumbSize/2, 0.5, -Sizes.SliderThumbSize/2)
                    sliderThumb.BackgroundColor3 = Theme.SliderThumb
                    sliderThumb.BorderSizePixel = 0
                    sliderThumb.Text = ""
                    sliderThumb.AutoButtonColor = false
                    sliderThumb.Parent = sliderTrack
                    
                    local thumbCorner = Instance.new("UICorner")
                    thumbCorner.CornerRadius = UDim.new(1, 0)
                    thumbCorner.Parent = sliderThumb
                    
                    local function updateSlider(input)
                        local min = options.Min or 0
                        local max = options.Max or 100
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativePos = mousePos.X - sliderTrack.AbsolutePosition.X
                        local percentage = math.clamp(relativePos / sliderTrack.AbsoluteSize.X, 0, 1)
                        
                        slider.Value = math.floor(min + (max - min) * percentage)
                        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                        sliderThumb.Position = UDim2.new(percentage, -Sizes.SliderThumbSize/2, 0.5, -Sizes.SliderThumbSize/2)
                        valueLabel.Text = tostring(slider.Value) .. (options.Suffix or "")
                        slider.Callback(slider.Value)
                    end
                    
                    local dragging = false
                    
                    sliderThumb.MouseButton1Down:Connect(function()
                        dragging = true
                    end)
                    
                    sliderTrack.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or
                           (IsMobile and input.UserInputType == Enum.UserInputType.Touch) then
                            dragging = true
                            updateSlider(input)
                        end
                    end)
                    
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or
                           (IsMobile and input.UserInputType == Enum.UserInputType.Touch) then
                            dragging = false
                        end
                    end)
                    
                    UserInputService.InputChanged:Connect(function(input)
                        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                           (IsMobile and input.UserInputType == Enum.UserInputType.Touch)) then
                            updateSlider(input)
                        end
                    end)
                    
                    function slider:Set(value)
                        local min = options.Min or 0
                        local max = options.Max or 100
                        slider.Value = math.clamp(value, min, max)
                        local percentage = (slider.Value - min) / (max - min)
                        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                        sliderThumb.Position = UDim2.new(percentage, -Sizes.SliderThumbSize/2, 0.5, -Sizes.SliderThumbSize/2)
                        valueLabel.Text = tostring(slider.Value) .. (options.Suffix or "")
                        slider.Callback(slider.Value)
                    end
                    
                    slider:Set(slider.Value)
                    
                    return slider
                end
                
                function section:CreateDropdown(options)
                    options = options or {}
                    local dropdown = {
                        Value = options.Default or (options.Options[1] or ""),
                        Callback = options.Callback or function() end,
                        Open = false,
                        List = nil,
                        Chevron = nil
                    }
                    
                    local dropdownFrame = Instance.new("Frame")
                    dropdownFrame.Name = options.Name or "Dropdown"
                    dropdownFrame.Size = UDim2.new(1, 0, 0, Sizes.ElementHeight)
                    dropdownFrame.BackgroundTransparency = 1
                    dropdownFrame.Parent = elementsContainer
                    
                    local label = Instance.new("TextLabel")
                    label.Text = options.Name or "Dropdown"
                    label.Size = UDim2.new(0.38, 0, 1, 0)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Theme.PrimaryText
                    label.TextSize = 12
                    label.Font = ThemeManager.Font
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.Parent = dropdownFrame
                    
                    local dropButton = Instance.new("TextButton")
                    dropButton.Size = UDim2.new(0.62, -4, 1, 0)
                    dropButton.Position = UDim2.new(0.38, 4, 0, 0)
                    dropButton.BackgroundColor3 = Theme.ElementBackground
                    dropButton.BorderSizePixel = 0
                    dropButton.Text = dropdown.Value
                    dropButton.TextColor3 = Theme.SecondaryText
                    dropButton.TextSize = 12
                    dropButton.Font = ThemeManager.Font
                    dropButton.AutoButtonColor = false
                    dropButton.ClipsDescendants = true
                    dropButton.Parent = dropdownFrame
                    
                    local dropCorner = Instance.new("UICorner")
                    dropCorner.CornerRadius = UDim.new(0, 4)
                    dropCorner.Parent = dropButton
                    
                    local dropBorder = Instance.new("UIStroke")
                    dropBorder.Color = Theme.DropdownBorder
                    dropBorder.Thickness = 1
                    dropBorder.Transparency = 0.5
                    dropBorder.Parent = dropButton
                    
                    local chevron = Instance.new("TextLabel")
                    chevron.Text = "▼"
                    chevron.Size = UDim2.new(0, 20, 1, 0)
                    chevron.Position = UDim2.new(1, -20, 0, 0)
                    chevron.BackgroundTransparency = 1
                    chevron.TextColor3 = Theme.DimText
                    chevron.TextSize = 10
                    chevron.Font = ThemeManager.Font
                    chevron.Parent = dropButton
                    dropdown.Chevron = chevron
                    
                    local dropList = Instance.new("Frame")
                    dropList.Size = UDim2.new(0, dropButton.AbsoluteSize.X, 0, math.min(#options.Options * 26, 130))
                    dropList.BackgroundColor3 = Theme.ElementBackground
                    dropList.BorderSizePixel = 0
                    dropList.Visible = false
                    dropList.ZIndex = 1000
                    dropList.Parent = screenGui
                    dropdown.List = dropList
                    
                    table.insert(window.Dropdowns, dropdown)
                    
                    local listCorner = Instance.new("UICorner")
                    listCorner.CornerRadius = UDim.new(0, 4)
                    listCorner.Parent = dropList
                    
                    local listBorder = Instance.new("UIStroke")
                    listBorder.Color = Theme.DropdownBorder
                    listBorder.Thickness = 1
                    listBorder.Parent = dropList
                    
                    local listScroll = Instance.new("ScrollingFrame")
                    listScroll.Size = UDim2.new(1, -4, 1, -4)
                    listScroll.Position = UDim2.new(0, 2, 0, 2)
                    listScroll.BackgroundTransparency = 1
                    listScroll.BorderSizePixel = 0
                    listScroll.ScrollBarThickness = 3
                    listScroll.ScrollBarImageColor3 = Theme.Accent
                    listScroll.ClipsDescendants = true
                    listScroll.ZIndex = 1001
                    listScroll.Parent = dropList
                    
                    local listLayout = Instance.new("UIListLayout")
                    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    listLayout.Parent = listScroll
                    
                    local function updateDropListPosition()
                        if dropList.Visible then
                            local buttonPos = dropButton.AbsolutePosition
                            local buttonSize = dropButton.AbsoluteSize
                            dropList.Position = UDim2.new(0, buttonPos.X, 0, buttonPos.Y + buttonSize.Y + 4)
                            dropList.Size = UDim2.new(0, buttonSize.X, 0, math.min(#options.Options * 26, 130))
                        end
                    end
                    
                    for _, option in ipairs(options.Options or {}) do
                        local optionButton = Instance.new("TextButton")
                        optionButton.Size = UDim2.new(1, 0, 0, 26)
                        optionButton.BackgroundTransparency = 1
                        optionButton.Text = option
                        optionButton.TextColor3 = Theme.SecondaryText
                        optionButton.TextSize = 12
                        optionButton.Font = ThemeManager.Font
                        optionButton.AutoButtonColor = false
                        optionButton.ZIndex = 1002
                        optionButton.Parent = listScroll
                        
                        optionButton.MouseEnter:Connect(function()
                            CreateTween(optionButton, {BackgroundTransparency = 0.9}, 0.1)
                            optionButton.BackgroundColor3 = Theme.TabHover
                            optionButton.TextColor3 = Theme.PrimaryText
                        end)
                        
                        optionButton.MouseLeave:Connect(function()
                            CreateTween(optionButton, {BackgroundTransparency = 1}, 0.1)
                            optionButton.TextColor3 = Theme.SecondaryText
                        end)
                        
                        optionButton.MouseButton1Click:Connect(function()
                            dropdown.Value = option
                            dropButton.Text = option
                            dropList.Visible = false
                            dropdown.Open = false
                            chevron.Text = "▼"
                            dropdown.Callback(option)
                        end)
                    end
                    
                    dropButton.MouseButton1Click:Connect(function()
                        for _, otherDropdown in pairs(window.Dropdowns) do
                            if otherDropdown ~= dropdown and otherDropdown.List and otherDropdown.List.Visible then
                                otherDropdown.List.Visible = false
                                otherDropdown.Open = false
                                if otherDropdown.Chevron then
                                    otherDropdown.Chevron.Text = "▼"
                                end
                            end
                        end
                        
                        dropdown.Open = not dropdown.Open
                        dropList.Visible = dropdown.Open
                        chevron.Text = dropdown.Open and "▲" or "▼"
                        if dropdown.Open then
                            updateDropListPosition()
                        end
                    end)
                    
                    mainFrame:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateDropListPosition)
                    dropdownFrame:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateDropListPosition)
                    
                    return dropdown
                end
                
                function section:CreateButton(options)
                    options = options or {}
                    local button = {
                        Callback = options.Callback or function() end
                    }
                    
                    local buttonFrame = Instance.new("TextButton")
                    buttonFrame.Name = options.Name or "Button"
                    buttonFrame.Size = UDim2.new(1, 0, 0, Sizes.ElementHeight + 2)
                    buttonFrame.BackgroundColor3 = Theme.Accent
                    buttonFrame.BackgroundTransparency = 0.1
                    buttonFrame.BorderSizePixel = 0
                    buttonFrame.Text = options.Name or "Button"
                    buttonFrame.TextColor3 = Theme.PrimaryText
                    buttonFrame.TextSize = 12
                    buttonFrame.Font = ThemeManager.Font
                    buttonFrame.AutoButtonColor = false
                    buttonFrame.Parent = elementsContainer
                    
                    local buttonCorner = Instance.new("UICorner")
                    buttonCorner.CornerRadius = UDim.new(0, 4)
                    buttonCorner.Parent = buttonFrame
                    
                    buttonFrame.MouseButton1Click:Connect(function()
                        CreateTween(buttonFrame, {BackgroundTransparency = 0.3}, 0.1)
                        wait(0.1)
                        CreateTween(buttonFrame, {BackgroundTransparency = 0.1}, 0.1)
                        button.Callback()
                    end)
                    
                    buttonFrame.MouseEnter:Connect(function()
                        CreateTween(buttonFrame, {BackgroundTransparency = 0}, 0.15)
                    end)
                    
                    buttonFrame.MouseLeave:Connect(function()
                        CreateTween(buttonFrame, {BackgroundTransparency = 0.1}, 0.15)
                    end)
                    
                    return button
                end
                
                function section:CreateKeybind(options)
                    options = options or {}
                    local keybind = {
                        Key = options.Default,
                        Callback = options.Callback or function() end,
                        Listening = false
                    }
                    
                    if not keybind.Key then
                        keybind.Key = Enum.KeyCode.F
                    end
                    
                    local keybindFrame = Instance.new("Frame")
                    keybindFrame.Name = options.Name or "Keybind"
                    keybindFrame.Size = UDim2.new(1, 0, 0, Sizes.ElementHeight)
                    keybindFrame.BackgroundTransparency = 1
                    keybindFrame.Parent = elementsContainer
                    
                    local label = Instance.new("TextLabel")
                    label.Text = options.Name or "Keybind"
                    label.Size = UDim2.new(0.65, 0, 1, 0)
                    label.BackgroundTransparency = 1
                    label.TextColor3 = Theme.PrimaryText
                    label.TextSize = 12
                    label.Font = ThemeManager.Font
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.Parent = keybindFrame
                    
                    local keyButton = Instance.new("TextButton")
                    keyButton.Size = UDim2.new(0, 55, 0, 20)
                    keyButton.Position = UDim2.new(1, -55, 0.5, -10)
                    keyButton.BackgroundColor3 = Theme.ElementBackground
                    keyButton.BorderSizePixel = 0
                    keyButton.TextColor3 = Theme.SecondaryText
                    keyButton.TextSize = 11
                    keyButton.Font = ThemeManager.Font
                    keyButton.AutoButtonColor = false
                    keyButton.Parent = keybindFrame
                    
                    local function getKeyName()
                        if typeof(keybind.Key) == "EnumItem" then
                            if keybind.Key.EnumType == Enum.KeyCode then
                                return keybind.Key.Name
                            elseif keybind.Key.EnumType == Enum.UserInputType then
                                if keybind.Key == Enum.UserInputType.MouseButton1 then
                                    return "MB1"
                                elseif keybind.Key == Enum.UserInputType.MouseButton2 then
                                    return "MB2"
                                elseif keybind.Key == Enum.UserInputType.MouseButton3 then
                                    return "MB3"
                                else
                                    return keybind.Key.Name
                                end
                            end
                        end
                        return "None"
                    end
                    
                    keyButton.Text = getKeyName()
                    
                    local keyCorner = Instance.new("UICorner")
                    keyCorner.CornerRadius = UDim.new(0, 3)
                    keyCorner.Parent = keyButton
                    
                    local keyBorder = Instance.new("UIStroke")
                    keyBorder.Color = Theme.CheckboxBorder
                    keyBorder.Thickness = 1
                    keyBorder.Transparency = 0.5
                    keyBorder.Parent = keyButton
                    
                    keyButton.MouseButton1Click:Connect(function()
                        keybind.Listening = true
                        keyButton.Text = "..."
                        keyButton.TextColor3 = Theme.Accent
                    end)
                    
                    UserInputService.InputBegan:Connect(function(input, gameProcessed)
                        if keybind.Listening then
                            if input.UserInputType == Enum.UserInputType.Keyboard then
                                keybind.Key = input.KeyCode
                            elseif input.UserInputType == Enum.UserInputType.MouseButton1 or
                                   input.UserInputType == Enum.UserInputType.MouseButton2 or
                                   input.UserInputType == Enum.UserInputType.MouseButton3 then
                                keybind.Key = input.UserInputType
                            end
                            keyButton.Text = getKeyName()
                            keyButton.TextColor3 = Theme.SecondaryText
                            keybind.Listening = false
                            
                            -- Update keybind menu if exists
                            if window.KeybindMenu then
                                -- Add keybind to menu
                                local keybindLabel = Instance.new("TextLabel")
                                keybindLabel.Text = (options.Name or "Keybind") .. ": " .. getKeyName()
                                keybindLabel.Size = UDim2.new(1, -10, 0, 20)
                                keybindLabel.Position = UDim2.new(0, 5, 0, 35)
                                keybindLabel.BackgroundTransparency = 1
                                keybindLabel.TextColor3 = Theme.SecondaryText
                                keybindLabel.TextSize = 12
                                keybindLabel.Font = ThemeManager.Font
                                keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
                                keybindLabel.Parent = window.KeybindMenu
                            end
                        elseif not gameProcessed then
                            if (typeof(keybind.Key) == "EnumItem") then
                                if (keybind.Key.EnumType == Enum.KeyCode and input.KeyCode == keybind.Key) or
                                   (keybind.Key.EnumType == Enum.UserInputType and input.UserInputType == keybind.Key) then
                                    keybind.Callback()
                                end
                            end
                        end
                    end)
                    
                    return keybind
                end
                
                return section
            end
            
            table.insert(bottomTab.SideTabs, sideTab)
            return sideTab
        end
        
        function bottomTab:SelectSideTab(sideTab)
            for _, st in pairs(bottomTab.SideTabs) do
                if st.Content then
                    st.Content.Visible = false
                end
                if st.Button then
                    st.Button.BackgroundTransparency = 0.5
                    st.Button:FindFirstChild("TextLabel").TextColor3 = Theme.SecondaryText
                end
            end
            
            if sideTab.Content then
                sideTab.Content.Visible = true
            end
            if sideTab.Button then
                sideTab.Button.BackgroundTransparency = 0
                sideTab.Button:FindFirstChild("TextLabel").TextColor3 = Theme.PrimaryText
            end
            
            bottomTab.ActiveSideTab = sideTab
            window.ActiveSideTab = sideTab
        end
        
        table.insert(window.BottomTabs, bottomTab)
        return bottomTab
    end
    
    -- Select Bottom Tab
    function window:SelectBottomTab(bottomTab)
        for _, bt in pairs(window.BottomTabs) do
            for _, st in pairs(bt.SideTabs) do
                if st.Button then
                    st.Button.Visible = false
                end
                if st.Content then
                    st.Content.Visible = false
                end
            end
            if bt.IconLabel and bt.NameLabel then
                bt.IconLabel.TextColor3 = Theme.DimText
                bt.NameLabel.TextColor3 = Theme.DimText
            end
        end
        
        for _, st in pairs(bottomTab.SideTabs) do
            if st.Button then
                st.Button.Visible = true
            end
        end
        
        if bottomTab.IconLabel and bottomTab.NameLabel then
            bottomTab.IconLabel.TextColor3 = Theme.Accent
            bottomTab.NameLabel.TextColor3 = Theme.Accent
        end
        
        window.ActiveBottomTab = bottomTab
        
        if #bottomTab.SideTabs > 0 then
            bottomTab:SelectSideTab(bottomTab.SideTabs[1])
        end
    end
    
    -- FIXED Color Picker with correct HSV gradient
    function window:CreateColorPicker(options)
        options = options or {}
        
        for _, picker in pairs(window.ColorPickers) do
            if picker then
                picker:Destroy()
            end
        end
        window.ColorPickers = {}
        
        local colorPicker = {
            Color = options.Default or Color3.new(1, 1, 1),
            Callback = options.Callback or function() end
        }
        
        local pickerFrame = Instance.new("Frame")
        pickerFrame.Name = "ColorPicker"
        pickerFrame.Size = UDim2.new(0, 260, 0, 300)
        pickerFrame.Position = UDim2.new(
            0,
            mainFrame.AbsolutePosition.X + mainFrame.AbsoluteSize.X + 12,
            0,
            mainFrame.AbsolutePosition.Y
        )
        pickerFrame.BackgroundColor3 = Theme.MainBackground
        pickerFrame.BorderSizePixel = 0
        pickerFrame.ZIndex = 2000
        pickerFrame.Parent = screenGui
        
        table.insert(window.ColorPickers, pickerFrame)
        
        local pickerCorner = Instance.new("UICorner")
        pickerCorner.CornerRadius = UDim.new(0, 8)
        pickerCorner.Parent = pickerFrame
        
        local pickerBorder = Instance.new("UIStroke")
        pickerBorder.Color = Theme.CheckboxBorder
        pickerBorder.Thickness = 1
        pickerBorder.Parent = pickerFrame
        
        local titleBar = Instance.new("Frame")
        titleBar.Size = UDim2.new(1, 0, 0, 28)
        titleBar.BackgroundColor3 = Theme.PanelBackground
        titleBar.BorderSizePixel = 0
        titleBar.Parent = pickerFrame
        
        local titleCorner = Instance.new("UICorner")
        titleCorner.CornerRadius = UDim.new(0, 8)
        titleCorner.Parent = titleBar
        
        local titleFix = Instance.new("Frame")
        titleFix.Size = UDim2.new(1, 0, 0, 8)
        titleFix.Position = UDim2.new(0, 0, 1, -8)
        titleFix.BackgroundColor3 = Theme.PanelBackground
        titleFix.BorderSizePixel = 0
        titleFix.Parent = titleBar
        
        local titleText = Instance.new("TextLabel")
        titleText.Text = "Color Picker"
        titleText.Size = UDim2.new(1, -28, 1, 0)
        titleText.BackgroundTransparency = 1
        titleText.TextColor3 = Theme.PrimaryText
        titleText.TextSize = 12
        titleText.Font = ThemeManager.Font
        titleText.Parent = titleBar
        
        local closeButton = Instance.new("TextButton")
        closeButton.Size = UDim2.new(0, 20, 0, 20)
        closeButton.Position = UDim2.new(1, -24, 0.5, -10)
        closeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        closeButton.BackgroundTransparency = 0
        closeButton.BorderSizePixel = 0
        closeButton.Text = "×"
        closeButton.TextColor3 = Theme.SecondaryText
        closeButton.TextSize = 18
        closeButton.Font = Enum.Font.SourceSans
        closeButton.AutoButtonColor = false
        closeButton.Parent = titleBar
        
        local closeCorner = Instance.new("UICorner")
        closeCorner.CornerRadius = UDim.new(0, 4)
        closeCorner.Parent = closeButton
        
        closeButton.MouseButton1Click:Connect(function()
            pickerFrame:Destroy()
        end)
        
        closeButton.MouseEnter:Connect(function()
            closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
            closeButton.TextColor3 = Theme.PrimaryText
        end)
        
        closeButton.MouseLeave:Connect(function()
            closeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            closeButton.TextColor3 = Theme.SecondaryText
        end)
        
        MakeDraggable(pickerFrame, titleBar)
        
        -- CORRECT HSV Implementation
        local satValFrame = Instance.new("ImageButton")
        satValFrame.Size = UDim2.new(0, 180, 0, 180)
        satValFrame.Position = UDim2.new(0, 12, 0, 38)
        satValFrame.BorderSizePixel = 0
        satValFrame.AutoButtonColor = false
        satValFrame.Parent = pickerFrame
        
        local satValCorner = Instance.new("UICorner")
        satValCorner.CornerRadius = UDim.new(0, 4)
        satValCorner.Parent = satValFrame
        
        -- Create the HSV gradient correctly
        local hueFrame = Instance.new("Frame")
        hueFrame.Size = UDim2.new(1, 0, 1, 0)
        hueFrame.BackgroundColor3 = Color3.fromHSV(0, 1, 1) -- This will be updated
        hueFrame.BorderSizePixel = 0
        hueFrame.Parent = satValFrame
        
        local hueCorner = Instance.new("UICorner")
        hueCorner.CornerRadius = UDim.new(0, 4)
        hueCorner.Parent = hueFrame
        
        -- White to transparent (left to right for saturation)
        local satGradient = Instance.new("UIGradient")
        satGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
            ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
        })
        satGradient.Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0),
            NumberSequenceKeypoint.new(1, 1)
        })
        satGradient.Rotation = 0
        satGradient.Parent = hueFrame
        
        -- Black gradient (top to bottom for value)
        local valFrame = Instance.new("Frame")
        valFrame.Size = UDim2.new(1, 0, 1, 0)
        valFrame.BackgroundTransparency = 1
        valFrame.BorderSizePixel = 0
        valFrame.Parent = satValFrame
        
        local valGradient = Instance.new("UIGradient")
        valGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
            ColorSequenceKeypoint.new(1, Color3.new(0, 0, 0))
        })
        valGradient.Rotation = 90
        valGradient.Parent = valFrame
        
        local valCorner2 = Instance.new("UICorner")
        valCorner2.CornerRadius = UDim.new(0, 4)
        valCorner2.Parent = valFrame
        
        local satValCursor = Instance.new("Frame")
        satValCursor.Size = UDim2.new(0, 8, 0, 8)
        satValCursor.Position = UDim2.new(0.5, -4, 0.5, -4)
        satValCursor.BackgroundColor3 = Color3.new(1, 1, 1)
        satValCursor.BorderSizePixel = 0
        satValCursor.ZIndex = 3
        satValCursor.Parent = satValFrame
        
        local cursorCorner = Instance.new("UICorner")
        cursorCorner.CornerRadius = UDim.new(1, 0)
        cursorCorner.Parent = satValCursor
        
        local cursorBorder = Instance.new("UIStroke")
        cursorBorder.Color = Color3.new(0, 0, 0)
        cursorBorder.Thickness = 2
        cursorBorder.Parent = satValCursor
        
        -- Hue Slider
        local hueSlider = Instance.new("ImageButton")
        hueSlider.Size = UDim2.new(0, 24, 0, 180)
        hueSlider.Position = UDim2.new(0, 204, 0, 38)
        hueSlider.BackgroundColor3 = Color3.new(1, 1, 1)
        hueSlider.BorderSizePixel = 0
        hueSlider.AutoButtonColor = false
        hueSlider.Parent = pickerFrame
        
        local hueSliderCorner = Instance.new("UICorner")
        hueSliderCorner.CornerRadius = UDim.new(0, 4)
        hueSliderCorner.Parent = hueSlider
        
        local hueGradient = Instance.new("UIGradient")
        hueGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
            ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
            ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
        })
        hueGradient.Rotation = 90
        hueGradient.Parent = hueSlider
        
        local hueCursor = Instance.new("Frame")
        hueCursor.Size = UDim2.new(1, 4, 0, 4)
        hueCursor.Position = UDim2.new(0, -2, 0, -2)
        hueCursor.BackgroundColor3 = Color3.new(1, 1, 1)
        hueCursor.BorderSizePixel = 0
        hueCursor.Parent = hueSlider
        
        local hueCursorCorner = Instance.new("UICorner")
        hueCursorCorner.CornerRadius = UDim.new(0, 2)
        hueCursorCorner.Parent = hueCursor
        
        local hueCursorBorder = Instance.new("UIStroke")
        hueCursorBorder.Color = Color3.new(0, 0, 0)
        hueCursorBorder.Thickness = 1
        hueCursorBorder.Parent = hueCursor
        
        -- RGB Inputs
        local inputContainer = Instance.new("Frame")
        inputContainer.Size = UDim2.new(1, -24, 0, 26)
        inputContainer.Position = UDim2.new(0, 12, 0, 228)
        inputContainer.BackgroundTransparency = 1
        inputContainer.Parent = pickerFrame
        
        local inputLayout = Instance.new("UIListLayout")
        inputLayout.FillDirection = Enum.FillDirection.Horizontal
        inputLayout.SortOrder = Enum.SortOrder.LayoutOrder
        inputLayout.Padding = UDim.new(0, 6)
        inputLayout.Parent = inputContainer
        
        local function createColorInput(label, value)
            local inputFrame = Instance.new("Frame")
            inputFrame.Size = UDim2.new(0, 36, 1, 0)
            inputFrame.BackgroundTransparency = 1
            inputFrame.Parent = inputContainer
            
            local inputBox = Instance.new("TextBox")
            inputBox.Size = UDim2.new(1, 0, 1, 0)
            inputBox.BackgroundColor3 = Theme.ElementBackground
            inputBox.BorderSizePixel = 0
            inputBox.Text = tostring(value)
            inputBox.TextColor3 = Theme.PrimaryText
            inputBox.TextSize = 11
            inputBox.Font = ThemeManager.Font
            inputBox.PlaceholderText = label
            inputBox.PlaceholderColor3 = Theme.DimText
            inputBox.Parent = inputFrame
            
            local inputCorner = Instance.new("UICorner")
            inputCorner.CornerRadius = UDim.new(0, 3)
            inputCorner.Parent = inputBox
            
            return inputBox
        end
        
        local rInput = createColorInput("R", math.floor(colorPicker.Color.R * 255))
        local gInput = createColorInput("G", math.floor(colorPicker.Color.G * 255))
        local bInput = createColorInput("B", math.floor(colorPicker.Color.B * 255))
        
        -- Hex Input
        local hexInput = Instance.new("TextBox")
        hexInput.Size = UDim2.new(1, -24, 0, 26)
        hexInput.Position = UDim2.new(0, 12, 0, 262)
        hexInput.BackgroundColor3 = Theme.ElementBackground
        hexInput.BorderSizePixel = 0
        hexInput.Text = string.format("#%02X%02X%02X",
            math.floor(colorPicker.Color.R * 255),
            math.floor(colorPicker.Color.G * 255),
            math.floor(colorPicker.Color.B * 255)
        )
        hexInput.TextColor3 = Theme.PrimaryText
        hexInput.TextSize = 12
        hexInput.Font = ThemeManager.Font
        hexInput.PlaceholderText = "#FFFFFF"
        hexInput.PlaceholderColor3 = Theme.DimText
        hexInput.Parent = pickerFrame
        
        local hexCorner = Instance.new("UICorner")
        hexCorner.CornerRadius = UDim.new(0, 3)
        hexCorner.Parent = hexInput
        
        -- Color picker logic
        local hue, sat, val = colorPicker.Color:ToHSV()
        
        local function updateColor()
            colorPicker.Color = Color3.fromHSV(hue, sat, val)
            
            -- Update the hue frame background to the current hue
            hueFrame.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
            
            rInput.Text = tostring(math.floor(colorPicker.Color.R * 255))
            gInput.Text = tostring(math.floor(colorPicker.Color.G * 255))
            bInput.Text = tostring(math.floor(colorPicker.Color.B * 255))
            hexInput.Text = string.format("#%02X%02X%02X",
                math.floor(colorPicker.Color.R * 255),
                math.floor(colorPicker.Color.G * 255),
                math.floor(colorPicker.Color.B * 255)
            )
            
            colorPicker.Callback(colorPicker.Color)
        end
        
        -- Saturation/Value selection
        local satValDragging = false
        
        satValFrame.MouseButton1Down:Connect(function()
            satValDragging = true
            local relativeX = math.clamp((Mouse.X - satValFrame.AbsolutePosition.X) / satValFrame.AbsoluteSize.X, 0, 1)
            local relativeY = math.clamp((Mouse.Y - satValFrame.AbsolutePosition.Y) / satValFrame.AbsoluteSize.Y, 0, 1)
            
            sat = relativeX
            val = 1 - relativeY
            
            satValCursor.Position = UDim2.new(relativeX, -4, relativeY, -4)
            updateColor()
        end)
        
        -- Hue selection
        local hueDragging = false
        
        hueSlider.MouseButton1Down:Connect(function()
            hueDragging = true
            local relativeY = math.clamp((Mouse.Y - hueSlider.AbsolutePosition.Y) / hueSlider.AbsoluteSize.Y, 0, 1)
            
            hue = relativeY
            hueCursor.Position = UDim2.new(0, -2, relativeY, -2)
            updateColor()
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or 
               (IsMobile and input.UserInputType == Enum.UserInputType.Touch) then
                if satValDragging then
                    local relativeX = math.clamp((Mouse.X - satValFrame.AbsolutePosition.X) / satValFrame.AbsoluteSize.X, 0, 1)
                    local relativeY = math.clamp((Mouse.Y - satValFrame.AbsolutePosition.Y) / satValFrame.AbsoluteSize.Y, 0, 1)
                    
                    sat = relativeX
                    val = 1 - relativeY
                    
                    satValCursor.Position = UDim2.new(relativeX, -4, relativeY, -4)
                    updateColor()
                elseif hueDragging then
                    local relativeY = math.clamp((Mouse.Y - hueSlider.AbsolutePosition.Y) / hueSlider.AbsoluteSize.Y, 0, 1)
                    
                    hue = relativeY
                    hueCursor.Position = UDim2.new(0, -2, relativeY, -2)
                    updateColor()
                end
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or
               (IsMobile and input.UserInputType == Enum.UserInputType.Touch) then
                satValDragging = false
                hueDragging = false
            end
        end)
        
        -- Initialize positions
        satValCursor.Position = UDim2.new(sat, -4, 1 - val, -4)
        hueCursor.Position = UDim2.new(0, -2, hue, -2)
        updateColor()
        
        return colorPicker
    end
    
    -- Draggable Button
    function window:AddDraggableButton(options)
        options = options or {}
        
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0, options.Width or 100, 0, options.Height or 30)
        button.Position = options.Position or UDim2.new(0.5, -50, 0.5, -15)
        button.BackgroundColor3 = Theme.Accent
        button.BorderSizePixel = 0
        button.Text = options.Text or "Button"
        button.TextColor3 = Theme.PrimaryText
        button.TextSize = 12
        button.Font = ThemeManager.Font
        button.AutoButtonColor = false
        button.Parent = screenGui
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = button
        
        MakeDraggable(button)
        
        button.MouseButton1Click:Connect(options.Callback or function() end)
        
        return button
    end
    
    -- Toggle Window
    function window:Toggle()
        mainFrame.Visible = not mainFrame.Visible
        if not mainFrame.Visible then
            closeAllDropdowns()
        end
    end
    
    -- Set OnUnload callback
    function window:OnUnload(callback)
        window.OnUnload = callback
    end
    
    -- Unload function
    function window:Unload()
        if window.OnUnload then
            window.OnUnload()
        end
        
        if window.CustomCursor then
            UserInputService.MouseIconEnabled = true
        end
        
        screenGui:Destroy()
    end
    
    -- Keybind for toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == toggleKey then
            window:Toggle()
        end
    end)
    
    -- Toggle keybind menu
    if window.KeybindMenu then
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode.Insert then
                window.KeybindMenu.Visible = not window.KeybindMenu.Visible
            end
        end)
    end
    
    return window
end

return PrimordialUI
